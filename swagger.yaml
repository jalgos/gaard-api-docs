openapi: 3.0.0
info:
  contact:
    name: Gaard API
    url: "https://gaard.ai/"
    email: "contact@ukpik.ai"
    x-twitter: JalgosAI
  license:
    name: "MIT"
    url: "https://opensource.org/licenses/MIT"
  description: |
    # Introduction

    Welcome to the Gaard API, a state-of-the-art interface designed to provide access to our advanced computer vision solutions for telesurveillance. Access the server at [https://vision.gaard.ai](https://vision.gaard.ai).

    Gaard API is built upon RESTful principles, providing intuitive and predictable resource URLs. It employs HTTP response codes for indicating errors and supports JSON in HTTP body for requests and responses. Regardless of your preferred programming language, you can effortlessly interface with our API using any HTTP/REST library.

    Our API fully supports all the functionalities provided by the Gaard application. This means every action possible within our app can be automated via the API, making your workflow integration seamless. This document will guide you through the most frequently used resources.

    To ensure secure access, Gaard utilizes API keys. Remember, your API keys are confidential. Please do not share them and keep them secure.

    Last update: 2024-05-15

  termsOfService: "https://gaard.ai/cgv"
  title: Gaard API
  version: 2.0.20186
  x-apisguru-categories:
    - vision
  x-preferred: true
  x-logo:
    url: https://raw.githubusercontent.com/jalgos/gaard-api-docs/master/images/logo.png

servers:
  - url: https://vision.gaard.ai
    description: Gaard API v2 (production)

tags:
  - description: Classification of analysis results
    name: Vision
  - description: System related endpoints
    name: System
  - description: Videos related endpoints
    name: Videos
  - description: Labels related endpoints
    name: Labels

paths:
  /api/flow/labels:
    post:
      security:
        - bearerAuth: []
      tags:
        - Labels
      summary: Add a label
      description: |
        This endpoint is used for setting or updating labels for a specific flow. This endpoint allows you to submit a request to update labels and associated metadata for a given video. 
        If an id is provided in the URL or in the request body, it will be used to find or create a label entry. This endpoint also supports video backup operations.
      operationId: addLabel
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LabelRequest'
        required: true

      responses:
        '200':
          description: |
            The response will contain the updated or created label entry.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClassifyResult"
        "500":
          description: Server side error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericError"

  /api/flow/labels/custom:
    get:
      security:
        - bearerAuth: []
      tags:
        - Labels
      summary: Get custom labels
      description: |
        This endpoint is used to retrieve a list of custom labels. 
        This is useful for getting predefined labels that can be used for classification or other purposes within your application.
      operationId: getCustomLabels

      responses:
        '200':
          description: If the custom labels are successfully updated, the response will indicate success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomLabelsResult"
        "500":
          description: Server side error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericError"
    post:
      security:
        - bearerAuth: []
      tags:
        - Labels
      summary: Add custom labels
      description: |
        This endpoint is designed for updating custom labels in the system. You need to provide a list of custom labels in the request body. 
        The endpoint will process these labels, ensure there are no duplicates, and update the labels in the database. 
        If the custom labels do not exist, they will be created.
      operationId: addCustomLabels
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CustomLabelsResult"
        required: true

      responses:
        '200':
          description: If the custom labels are successfully updated, the response will indicate success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResult"
        "500":
          description: Server side error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericError"
  
  /api/label:
    options:
      security:
        - bearerAuth: []
      tags:
        - Labels
      summary: Get available labels
      description: |
        This endpoint provides a list of standard and custom `labels` used for classification purposes. 
        Labels are categorized into standard labels (predefined and commonly used) and custom labels (user-defined labels fetched from the database). 
        The request is typically used to retrieve available labels for use in classification processes.
      operationId: getAvailableLabels

      responses:
        '200':
          description: |
            The response will return a JSON object containing two lists: 
            - `standard`: A list of predefined labels.
            - `custom`: A list of custom labels retrieved from the database, excluding any duplicates or overlaps with the standard labels.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LabelsAllResult"
        "500":
          description: Server side error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericError"
  
  /api/label/{classify_id}:
    post:
      security:
        - bearerAuth: []
      tags:
        - Labels
      summary: Set labels to classification
      description: |
        This endpoint is used to assign or update labels associated with a video classification task identified by `classify_id`. 
        The labels are provided in the request body along with an optional comment. This endpoint processes the labels, saves them to the database, and optionally backs up the labeled video.
      operationId: setLabelsToClassification
      parameters:
        - in: path
          name: classify_id
          required: true
          schema:
            $ref: "#/components/schemas/ClassifyIdParam"
          description: The ID of the classification task.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SetLabelsRequest"
              required:
                - labels
        required: true
      responses:
        '200':
          description: | 
            If the labels are successfully applied and saved, the server will return a JSON object containing the details of the classification task with the newly assigned labels.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LabelResult"
        "500":
          description: Server side error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericError"

  /api/avconv/serve.v2/{filename}:
    get:
      security:
        - bearerAuth: []
      tags:
        - Videos
      summary: Serve Highlighted video file
      description: | 
        The endpoint serves a video file to the client. It checks if a highlighted (processed) version of the video is available and, if not, converts the original video to MP4 format before serving it. 
        This endpoint is useful for delivering video files in MP4 format to clients, ensuring that they are always served in a compatible format, regardless of the original format
      operationId: serveHighlightedVideoFile
      parameters:
        - name: filename
          in: path
          required: true
          description: The name of the video file to be served.
          schema:
            $ref: "#/components/schemas/FilenameParam"
      responses:
        '200':
          description: Video file served successfully.
          content:
            video/mp4:
              schema:
                $ref: "#/components/schemas/VideoFileResult"
        '404':
          description: Video file not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericError"
        "500":
          description: Server side error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericError"

  /api/avconv/original/serve.v2/{filename}:
    get:
      security:
        - bearerAuth: []
      tags:
        - Videos
      summary: Serve Original video file
      description: |
        The endpoint serves a original video file to the client. This endpoint is useful for delivering video files in MP4 format to clients, ensuring that they are always served in a compatible format, regardless of the original format
      operationId: serveOriginalVideoFile
      parameters:
        - name: filename
          in: path
          required: true
          description: The name of the video file to be served.
          schema:
            $ref: "#/components/schemas/FilenameParam"
      responses:
        '200':
          description: Video file served successfully.
          content:
            video/mp4:
              schema:
                $ref: "#/components/schemas/VideoFileResult"
        '404':
          description: Video file not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericError"
        "500":
          description: Server side error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericError"

  /version:
    get:
      tags:
        - System
      operationId: versionId
      summary: Current build version
      description: Returns current build version and node information for API service.
      responses:
        "200":
          description: A JSON object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Version"
              example:
                {
                  "tag": "8218",
                  "node": "gaard-node1",
                  "pod": "pub-677656cfc9-7tqc2",
                  "build_at": "Wed Mar 25 10:28:17 UTC 2020",
                  "model": "prod.model.20191018004336.rds",
                  "namespace": "production",
                }

  /classify:
    post:
      security:
        - bearerAuth: []
      tags:
        - Vision
      summary: Classify a video
      description: |
        This endpoint allows for video classification by submitting video files and optional metadata.
        The classification can either be processed synchronously or asynchronously, based on the `sync` query parameter.

        - **Synchronous Processing (`sync=true`)**: The server processes the video immediately and returns the classification result directly in the response. This is ideal for cases where immediate feedback is required.
        - **Asynchronous Processing (`sync=false` or not provided)**: The classification is queued and processed in the background. The server returns an acknowledgment response with an `id` that can later be used to fetch the classification results once processing is complete.
        
        This endpoint is crucial for initiating the classification process of video files, providing flexibility based on your processing needs.
      operationId: classifyVideo
      parameters:
      - name: sync
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/SyncParam'
        description: |
          Controls if the classification is processed synchronously (`sync=true`) or asynchronously (`sync=false` or not provided).
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/VideoClassificationRequest'
        required: true
      responses:
        '200':
          description: | 
            If the classification is processed synchronously (`sync=true`), the response will be a JSON object containing the classification results.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClassifyResult"
              example: >
                {
                  "id": "66e055a62a93a3fde9ba7ed6",
                  "status": {
                    "classify": "accepted",
                    "video": "accepted"
                  },
                  "camera_id": "134188-VI08",
                  "tenant": "on-premise",
                  "duration": 1283465,
                  "duration_seconds": 1,
                  "model": "default",
                  "version": "2.0.16123",
                  "error_code": 0,
                  "error_msg": "",
                  "risk": "",
                  "labels": [
                    "flag",
                    "intrusion",
                    "vehicule"
                  ],
                  "scores": {
                    "NOTHING": 0.00025552011262380115,
                    "intrusion": 0.918744163159948,
                    "person": 0.12695148061787767,
                    "plant": 0.049358549524389075,
                    "rain": 0.004554292405135713,
                    "text": 0.000977604282076755,
                    "web": 0.004425417528239508,
                    "animal": 0.06220918576737605,
                    "flag": 0.8295322694836862,
                    "other": 0.020228226668765597,
                    "spider": 0.00343773873185638,
                    "vehicule": 0.8928721973019503,
                    "wind": 0.007171697000292765
                  },
                  "video": {
                    "videoname": "video.mp4",
                    "filesize": 246792,
                    "specs": {
                      "original.height": 480,
                      "original.nframes": 23,
                      "width": 426,
                      "fps": 2.608695652173913,
                      "nframes": 6,
                      "original.fps": 10,
                      "duration": 2.3,
                      "height": 320,
                      "original.width": 640
                    }
                  },
                  "metadata": {
                    "client_id": 134188,
                    "code_msg": "VI08",
                    "no_trans": "20818",
                    "parc_origine": "XX"
                  },
                  "created_at": "2024-09-10T14:20:22.519865154Z",
                  "started_at": "2024-09-10T14:20:22.519865376Z"
                }
        "408":
          description: Request Timeout
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericError"
        "412":
          description: Precondition Failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericError"
        "500":
          description: Server side error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericError"

  /result/{classify_id}:
    get:
      security:
        - bearerAuth: []
      tags:
        - Vision
      parameters:
        - in: path
          name: classify_id
          required: true
          schema:
            $ref: "#/components/schemas/ClassifyIdParam"
          description: The ID of the classification task.
      operationId: getResult
      summary: Get classification result by classify_id
      description: |
        The endpoint retrieves the classification result for a given `classify_id`. This ID is used to look up the 
        classification task and return its status, results, and associated metadata. The response includes detailed information about the classification, 
        including video specs, labels, risk assessments, and confidence scores.
      responses:
        "200":
          description: If the classification task is found, the server will return a status code along with the classification result in JSON format.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClassifyResult"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericError"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericError"

security:
  - bearerAuth: []
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
  schemas:
    Version:
      type: object
      properties:
        tag:
          type: string
          description: Build number from CI/CD
        node:
          type: string
          description: The service instance node in the cluster
        pod:
          type: string
          description: Kubernetes pod name
        build_at:
          type: string
          description: Indicates when service was built
        model:
          type: string
          description: Indicates the ML/AI model version
        namespace:
          type: string
          description: Kubernetes namespace
    GenericError:
      type: object
      example: { "success": false, "error": "" }
      properties:
        success:
          type: boolean
          description: State of operation
        error:
          type: string
          description: Error message
    SuccessResult:
      type: object
      example: { "success": true }
      properties:
        success:
          type: boolean
          description: State of operation
    ClassifyResult:
      type: object
      description: ClassifyResult is a type structure used in the response of the endpoint `/classify?sync=true`.
      properties:
        id:
          type: string
          description: The unique identifier of the result object.
          example: "66448cfd56039e2eb7701009"
        status:
          type: object
          description: Details of the status.
          properties:
            classify:
              type: string
              description: The classify status.
              example: "accepted"
            video:
              type: string
              description: The video status.
              example: "accepted"
        camera_id:
          type: string
          description: The unique identifier of the camera.
          example: "134188-VI01"
        analyse_id:
          type: integer
          description: The identifier of the analysis.
          example: 1134915906
        tenant:
          type: string
          description: The identifier of the tenant.
          example: "demo"
        duration:
          type: integer
          description: The duration of the video in milliseconds.
          example: 3042056
        duration_seconds:
          type: integer
          description: The duration of the video in seconds.
          example: 3
        model:
          type: string
          description: The model used for the analysis.
          example: "noname"
        version:
          type: string
          description: The version of the model used for the analysis.
          example: "2.0.16123"
        error_code:
          type: integer
          description: Code indicating the error, if any.
          example: 0
        risk:
          type: string
          description: The risk determined by the analysis.
          example: "intrusion"
        labels:
          type: array
          description: The labels determined by the analysis.
          items:
            type: string
          example: ["intrusion", "person"]
        scores:
          type: object
          description: The scores for each label.
          properties:
            spider:
              type: number
              format: float
              example: 0.006814155539197582
            animal:
              type: number
              format: float
              example: 0.03490323977691366
            plant:
              type: number
              format: float
              example: 0.029940119760479042
            vehicule:
              type: number
              format: float
              example: 0.10077824836276382
            text:
              type: number
              format: float
              example: 0.0006343906582260771
            web:
              type: number
              format: float
              example: 0.008982035928143716
            rain:
              type: number
              format: float
              example: 0.0018018018018018014
            wind:
              type: number
              format: float
              example: 0.02095808383233533
            NOTHING:
              type: number
              format: float
              example: 0.0004909645916406409
            flag:
              type: number
              format: float
              example: 0.04917147676228464
            intrusion:
              type: number
              format: float
              example: 0.9730538922155688
            other:
              type: number
              format: float
              example: 0.028108597054560112
            person:
              type: number
              format: float
              example: 0.9730538922155688
        video:
          type: object
          description: Details of the video.
          properties:
            videoname:
              type: string
              description: The name of the video file.
              example: "video.mov"
            filesize:
              type: integer
              description: The size of the video file in bytes.
              example: 786800
            specs:
              type: object
              description: Specifications of the video.
              properties:
                duration:
                  type: number
                  format: float
                  description: The duration of the video.
                  example: 4.217772
                fps:
                  type: number
                  format: float
                  description: Frames per second of the video.
                  example: 3.082196003008223
                original.nframes:
                  type: integer
                  description: The original number of frames in the video.
                  example: 12
                original.width:
                  type: integer
                  description: The original width of the video in pixels.
                  example: 640
                height:
                  type: integer
                  description: The height of the video in pixels.
                  example: 320
                nframes:
                  type: integer
                  description: The number of frames in the video.
                  example: 13
                original.fps:
                  type: number
                  format: float
                  description: The original frames per second of the video.
                  example: 3
                original.height:
                  type: integer
                  description: The original height of the video in pixels.
                  example: 360
                width:
                  type: integer
                  description: The width of the video in pixels.
                  example: 568
        metadata:
          type: object
          description: Additional optional data.
          properties:
            camera_id:
              type: string
              description: The unique identifier of the camera.
              example: "VI01"
            client_id:
              type: string
              description: The unique identifier of the client.
              example: "134188"
        created_at:
          type: string
          format: date-time
          description: The timestamp when the analysis was created.
          example: "2024-05-15T12:22:54.032628557+02:00"
        started_at:
          type: string
          format: date-time
          description: The timestamp when the analysis started.
          example: "2024-05-15T12:22:54.032628727+02:00"
    LabelResult:
      type: object
      description: LabelResult is a type structure used in the response for video classification results.
      properties:
        data:
          type: object
          description: The main content of the classification result.
          properties:
            id:
              type: string
              description: The unique identifier of the result object.
              example: "66e084db3610f76755482536"
            analyseId:
              type: integer
              description: The identifier of the analysis.
              example: 0
            videoName:
              type: string
              description: The name of the video file.
              example: "71935_RO8234817052024141219.mp4"
            labels:
              type: array
              description: Labels determined by the analysis.
              items:
                type: string
              example: ["p3", "p4"]
            createdAt:
              type: string
              format: date-time
              description: The timestamp when the result was created.
              example: "2024-09-17T21:35:10.562818156Z"
            userId:
              type: string
              description: The unique identifier of the user who submitted the request.
              example: "000000000000000000000000"
            backup:
              type: boolean
              description: Indicates if the result is backed up.
              example: true
            version:
              type: string
              description: The version of the system that processed the classification.
              example: "2.0"
            comment:
              type: string
              description: Additional comments or information related to the result.
              example: ""
        success:
          type: boolean
          description: Indicates whether the operation was successful.
          example: true
    CustomLabelsResult:
      type: object
      description: CustomLabelsResult is a structure that represents a set of custom labels with their values and descriptions.
      properties:
        labels:
          type: array
          description: An array of custom labels with their corresponding values.
          items:
            type: object
            properties:
              value:
                type: string
                description: The internal value of the label.
                example: "false_intrusion"
              label:
                type: string
                description: The display name of the label.
                example: "false_intrusion"
          example:
            - value: "false_intrusion"
              label: "false_intrusion"
            - value: "custom"
            - value: "person"
              label: "person"
            - value: "thermal"
              label: "thermal"
            - value: "vehicule"
              label: "vehicule"
            - value: "people:1"
              label: "people:1"
            - value: "p3"
              label: "p3"
            - value: "p2"
              label: "p2"
            - value: "text"
              label: "text"
            - value: "p1"
              label: "p1"
            - value: "p4"
              label: "p4"
            - value: "traffic"
              label: "traffic"
            - value: "plant"
              label: "plant"
            - value: "animal"
              label: "animal"
            - value: "flag"
              label: "flag"
    LabelsAllResult:
      type: object
      description: | 
        Schema representing two sets of labels: standard and custom.
      properties:
        standard:
          type: array
          description: An array of standard labels.
          items:
            type: string
          example:
            - "animal"
            - "flag"
            - "person"
            - "plant"
            - "rain"
            - "spider"
            - "text"
            - "vehicule"
            - "web"
            - "wind"
            - "EMPTY"
            - "FIX"
            - "N/A"
        custom:
          type: array
          description: An array of custom labels.
          items:
            type: string
          example:
            - "Gaard"
            - "label1"
            - "label2"
            - "custom"
    VideoFileResult:
      type: string
      format: binary
    FilenameParam:
      type: string
      description: The name of the file to be served.
    ClassifyIdParam:
      type: string
      description: The ID of the classification task.
    SyncParam:
      type: boolean
      description: Controls if the classification is processed synchronously (`sync=true`) or asynchronously (`sync=false` or not provided).
    LabelRequest:
      type: object
      properties:
        id:
          type: string
          description: The unique identifier for the classification result.
          example: "66e084db3610f76755482536"
        videoName:
          type: string
          description: The name of the video file.
          example: "71935_RO8234817052024141219.mp4"
        labels:
          type: array
          description: Labels assigned to the classification result.
          items:
            type: string
          example:
            - "p3"
            - "p4"
        comment:
          type: string
          description: An optional comment related to the classification result.
          example: ""
    SetLabelsRequest:
      type: object
      description: Schema for request body containing labels and a comment.
      properties:
        labels:
          type: array
          description: An array of labels to be applied.
          items:
            type: string
          example:
            - "custom"
        comment:
          type: string
          description: A comment regarding the request.
          example: "comment"
    VideoClassificationRequest:
      type: object
      description: Schema for request body containing a video and a metadata.
      properties:
        video:
          type: string
          format: binary
          description: Video file to be classified
        metadata:
          type: string
          format: binary
          description: Metadata file in JSON format
          example: |
            {
              "client_id": 134188,
              "camera_id": "VI01"
            }