openapi: 3.0.0
info:
  contact:
    name: Gaard API
    url: "https://gaard.ai/"
    x-twitter: JalgosAI
  description: |
    # Introduction

    Welcome to the Gaard API, a state-of-the-art interface designed to provide access to our advanced computer vision solutions for telesurveillance. Access the server at [https://vision.gaard.ai](https://vision.gaard.ai).

    Gaard API is built upon RESTful principles, providing intuitive and predictable resource URLs.
    It employs HTTP response codes for indicating errors and supports JSON in HTTP body for requests and responses.
    Regardless of your preferred programming language, you can effortlessly interface with our API using any HTTP/REST library.

    Our API fully supports all the functionalities provided by the Gaard application.
    This means every action possible within our app can be automated via the API, making your workflow integration seamless.
    This document will guide you through the most frequently used resources.

    To ensure secure access, Gaard utilizes API keys.
    Please reach out to us at [https://gaard.ai/contact-1](https://gaard.ai/contact-1) to obtain your unique API key.
    Remember, your API keys are confidential. Please do not share them and keep them secure.

    Last update: 2023-06-15

  termsOfService: "https://gaard.ai/licensing"
  title: Gaard API
  version: 2.0.19862
  x-apisguru-categories:
    - vision
  x-preferred: true
  x-logo:
    url: https://raw.githubusercontent.com/jalgos/gaard-api-docs/master/images/logo.png

servers:
  - url: https://vision.gaard.ai
    description: Gaard API v2 (production)

tags:
  - description: Classification of analysis results
    name: Classification
  - description: Auth system endpoints
    name: Auth
  - description: System related endpoints
    name: System

paths:
  /:
    get:
      tags:
        - System
      operationId: version
      summary: Current build version
      description: Returns current build version and node information for API service.
      responses:
        "200":
          description: A JSON object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Version"
              example:
                {
                  "tag": "8218",
                  "node": "gaard-node1",
                  "pod": "pub-677656cfc9-7tqc2",
                  "build_at": "Wed Mar 25 10:28:17 UTC 2020",
                  "model": "prod.model.20191018004336.rds",
                  "namespace": "production",
                }
  /version:
    get:
      tags:
        - System
      operationId: versionId
      summary: Current build version
      description: Returns current build version and node information for API service.
      responses:
        "200":
          description: A JSON object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Version"
              example:
                {
                  "tag": "8218",
                  "node": "gaard-node1",
                  "pod": "pub-677656cfc9-7tqc2",
                  "build_at": "Wed Mar 25 10:28:17 UTC 2020",
                  "model": "prod.model.20191018004336.rds",
                  "namespace": "production",
                }
  /healthz:
    get:
      tags:
        - System
      operationId: healthz
      summary: Health check
      description: Check if the API is reachable by returning its state.
      responses:
        "200":
          description: A JSON object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Health"
              example: { "success": true }
  /metrics:
    get:
      tags:
        - System
      operationId: metrics
      summary: Prometheus metrics
      description: Metrcis endpoint for Prometheus.
      responses:
        "200":
          description: Prometheus metrics

  /login:
    get:
      tags:
        - Auth
      operationId: login
      summary: Authenticate user
      responses:
        "307":
          description: Redirect to login callback URL specified in the API configuration

  /logout:
    get:
      tags:
        - Auth
      operationId: logout
      summary: Logout of current user session
      responses:
        "307":
          description: If the user session is active, redirect to logout callback URL specified in the API configuration
        "500":
          description: If there is no active session, an error is returned


  /session:
    get:
      security:
        - bearerAuth: []
      tags:
        - Auth
      operationId: session
      summary: User session information
      responses:
        "200":
          description: A JSON object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Session"
              example: { "success": true, "tenant": "meta" }

  /classify:
    post:
      security:
        - bearerAuth: []
      tags:
        - Classification
      summary: Classify a video
      description: Upload a video and its metadata for classification
      operationId: classifyVideo
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                video:
                  type: string
                  format: binary
                  description: Video file to be classified
                metadata:
                  type: string
                  format: binary
                  description: Metadata file in JSON format
                  example: >
                    {
                      "analyse_id": 1254448,
                      "client_id": 134188,
                      "no_trans": "20818",
                      "parc_origine": "RO",
                      "date_recep": "16-jan-2019 10:09:57",
                      "code_msg": "VI08",
                      "date_start_analyse": "2019-01-16 10:09:57.216"
                    }
        required: true
      responses:
        '200':
          description: A JSON object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClassifyResult"
              example: >
                {
                  "id": "6442641243e98f53a75dd18a",
                  "accepted_at": "2023-04-21T12:23:14.066697348+02:00",
                  "task": {
                    "id": "6442641243e98f53a75dd18a",
                    "parentId": "000000000000000000000000",
                    "cameraId": "134188-VI08",
                    "analyse_id": 1254448,
                    "tenant": "meta",
                    "duration": 1085064,
                    "duration_seconds": 1,
                    "model": "noname",
                    "version": "2.0.16123",
                    "error_code": 0,
                    "metadata": {
                      "analyse_id": 1254448,
                      "client_id": 134188,
                      "code_msg": "VI08",
                      "date_recep": "16-jan-2019 10:09:57     ",
                      "date_start_analyse": "2019-01-16 10:09:57.216",
                      "no_trans": "20818",
                      "parc_origine": "RO"
                    },
                    "gaard_result": {
                      "yolo": {
                        "person": 0,
                        "vehicule": 0
                      },
                      "raw_scores": {
                        "NOTHING": 0.0009209133446293678,
                        "animal": 0.047020897252785576,
                        "flag": 0.14476033474895758,
                        "intrusion": 0.8923497761884469,
                        "plant": 0.0534737527514453,
                        "rain": 0.004382775188993098,
                        "spider": 0.00936596151481541,
                        "text": 0.012392940304383772,
                        "web": 0.004786852323527879,
                        "wind": 0.030874568392755878,
                        "person": 0.7356461054696766,
                        "vehicule": 0.4086555850084504
                      },
                      "result": "classified",
                      "scores": {
                        "wind": 0.030874568392755878,
                        "animal": 0.047020897252785576,
                        "text": 0.012392940304383772,
                        "web": 0.004786852323527879,
                        "person": 0.7356461054696766,
                        "plant": 0.0534737527514453,
                        "rain": 0.004382775188993098,
                        "spider": 0.00936596151481541,
                        "vehicule": 0.4086555850084504,
                        "NOTHING": 0.0009209133446293678,
                        "flag": 0.14476033474895758,
                        "intrusion": 0.8923497761884469
                      },
                      "video": {
                        "duration": 2.3,
                        "nframes": 6,
                        "original.fps": 3,
                        "original.nframes": 6,
                        "fps": 2.608695652173913,
                        "height": 320,
                        "original.height": 480,
                        "original.width": 640,
                        "width": 426
                      }
                    },
                    "labels": [
                      "DANGER"
                    ],
                    "video_details": {
                      "videoname": "video.1254448.mp4",
                      "filesize": 246792
                    },
                    "created": "2023-04-21T12:23:14.066690918+02:00",
                    "started": "2023-04-21T12:23:14.066691058+02:00",
                    "risk": "danger",
                    "withExclusionZone": true
                  }
                }

        "500":
          description: Server side error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericError"

  /result:
    get:
      security:
        - bearerAuth: []
      tags:
        - Classification
      operationId: getResult
      summary: Get classification result by analyse_id
      parameters:
        - name: analyse_id
          in: query
          description: analyse_id for which to retrieve the classification result
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: A JSON object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClassifyResult"

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
  schemas:
    Version:
      type: object
      properties:
        tag:
          type: string
          description: Build number from CI/CD
        node:
          type: string
          description: The service instance node in the cluster
        pod:
          type: string
          description: Kubernetes pod name
        build_at:
          type: string
          description: Indicates when service was built
        model:
          type: string
          description: Indicates the ML/AI model version
        namespace:
          type: string
          description: Kubernetes namespace
    Health:
      type: object
      properties:
        success:
          type: boolean
          description: State of the API
    GenericError:
      type: object
      example: { "success": false, "error": "" }
      properties:
        success:
          type: boolean
          description: State of operation
        error:
          type: string
          description: Error message
    Session:
      type: object
      properties:
        success:
          type: boolean
          description: State of active session
        tenant:
          type: string
          description: User tenant role

    ClassifyResult:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the classification result
        accepted_at:
          type: string
          format: date-time
          description: Timestamp when the classification was accepted
        task:
          $ref: "#/components/schemas/Task"
    Task:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the task
        parentId:
          type: string
          description: Identifier of the parent task, if any
        cameraId:
          type: string
          description: Identifier of the camera used for the video
        analyse_id:
          type: integer
          description: Identifier of the analysis
        tenant:
          type: string
          description: Tenant name
        duration:
          type: integer
          description: Duration of the video in microseconds
        duration_seconds:
          type: integer
          description: Duration of the video in seconds
        model:
          type: string
          description: Model used for classification
        version:
          type: string
          description: Version of the model used for classification
        error_code:
          type: integer
          description: Error code, if any, during the classification process
        metadata:
          type: object
          additionalProperties: true
          description: Metadata related to the video
        gaard_result:
          type: object
          additionalProperties: true
          description: Results from the classification process
        labels:
          type: array
          items:
            type: string
          description: Array of labels generated from the classification
        video_details:
          type: object
          additionalProperties: true
          description: Details about the video file
        created:
          type: string
          format: date-time
          description: Timestamp when the task was created
        started:
          type: string
          format: date-time
